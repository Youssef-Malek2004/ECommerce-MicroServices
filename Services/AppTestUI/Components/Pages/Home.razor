@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using Shared.Contracts.Entities.NotificationService

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

Messages from the server 👇

<ul>
    @foreach (var notification in _notifications)
    {
        <li>
            <strong>@notification.Title:</strong> @notification.Message
            <button @onclick="() => MarkNotificationAsRead(notification.Id)">Mark as Read</button>
        </li>   
    }
</ul>

@code
{
    private HubConnection? _hubConnection;
    private readonly List<Notification> _notifications = new();
    private bool _isRendering;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5279/chat-hub",
                o => o.AccessTokenProvider = () => Task.FromResult<string?>("eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwM2RjZTU3Zi1iMmIyLTQ2NDgtYjQ4Zi00YjAwMTdmYWM1ODQiLCJlbWFpbCI6InlvdXNzZWZtYWxla3ZlbmRvckBnbWFpbC5jb20iLCJjdXN0b21fZ3JvdXAiOiJWZW5kb3JzIiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjpbIlJlZ2lzdGVyZWQiLCJWZW5kb3IiXSwiUGVybWlzc2lvbnMiOlsiUmVhZFVzZXJzIiwiVXBkYXRlVXNlcnMiLCJNdXN0QmVTYW1lVXNlciJdLCJleHAiOjE3MzM3OTQzNzcsImlzcyI6IkVjb21tZXJjZS5Vc2VyU2VydmljZSIsImF1ZCI6IkVjb21tZXJjZS5Vc2VycyJ9.BAP13CxS0BhB7L6k04WmzCYFS5ERhuEE4Aetqps-l1NiWyYl4wp9BKIv0hkHeeJlzLDICiLJAs9nKrFVFS1PP6DkzWkgogwpI_RlijTZe6cT-Wctn-_IzdWILbBo7lgA_Hjjp4iJYRcBasKus_xeTyKOX0J8OTJygwrhJdiiPEOzknG8-nXG0f5ItXDqMuxTtBlnyx4uuahTcxWbz7KxAKyHyY8ypsrotgL5aMZSiZMzn1KNq_HKwBSz9J7Dp5hxCxNGH0QWFksfjRJ4a8xL_GhXpmdqoUFywWv6qHPjxyV-AUwjP61HxLTeows0_vjVz1jVY9hkzeAwpHprmkkdFA"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>("ReceiveNotification", message =>
        {
            try
            {
                var notification = JsonSerializer.Deserialize<Notification>(message);
                if (notification == null) return;
                if (_notifications.All(n => n.Id != notification.Id))
                {
                    _notifications.Add(notification);

                    if (!_isRendering)
                    {
                        _isRendering = true;
                        InvokeAsync(StateHasChanged).ContinueWith(_ => _isRendering = false);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deserializing notification: {ex.Message}");
            }
        });

        try
        {
            await _hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
        }
    }
    
    private async Task MarkNotificationAsRead(Guid notificationId)
    {
        if (_hubConnection == null)
        {
            Console.WriteLine("SignalR connection is not established.");
            return;
        }

        try
        {
            await _hubConnection.InvokeAsync("MarkNotificationAsRead", notificationId);
            
            Console.WriteLine($"Marked notification {notificationId} as read.");
            
            // Optionally, mark the notification as read locally
            var notification = _notifications.FirstOrDefault(n => n.Id == notificationId);
            if (notification != null)
            {
                _notifications.Remove(notification);
                
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking notification as read: {ex.Message}");
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}
