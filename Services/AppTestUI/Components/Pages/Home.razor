@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using Shared.Contracts.Entities.NotificationService
@using MudBlazor

<PageTitle>Home</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudPaper Elevation="4" Class="p-4">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Hello, world!</MudText>
        <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="mb-4">
            Welcome to your new app.
        </MudText>

        <MudDivider Class="mb-4" />

        <MudText Typo="Typo.h6">Messages from the server 👇</MudText>
        
        <MudList T="Notification">
            @foreach (var notification in _notifications)
            {
            <MudListItem>
                <MudPaper Class="p-2 mb-2 d-flex align-items-center">
                    <div>
                        <MudText Typo="Typo.subtitle2" Class="mb-1"><strong>@notification.Title</strong></MudText>
                        <MudText Typo="Typo.body2">@notification.Message</MudText>
                    </div>
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => MarkNotificationAsRead(notification.Id)">
                        Mark as Read
                    </MudButton>
                </MudPaper>
            </MudListItem>
            }
        </MudList>
    </MudPaper>
</MudContainer>

@code {
    private HubConnection? _hubConnection;
    private readonly List<Notification> _notifications = new();
    private bool _isRendering;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5279/chat-hub",
                o => o.AccessTokenProvider = () => Task.FromResult<string?>("your-token-here"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>("ReceiveNotification", message =>
        {
            try
            {
                var notification = JsonSerializer.Deserialize<Notification>(message);
                if (notification == null) return;
                if (_notifications.All(n => n.Id != notification.Id))
                {
                    _notifications.Add(notification);

                    if (!_isRendering)
                    {
                        _isRendering = true;
                        InvokeAsync(StateHasChanged).ContinueWith(_ => _isRendering = false);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deserializing notification: {ex.Message}");
            }
        });

        try
        {
            await _hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
        }
    }

    private async Task MarkNotificationAsRead(Guid notificationId)
    {
        if (_hubConnection == null)
        {
            Console.WriteLine("SignalR connection is not established.");
            return;
        }

        try
        {
            await _hubConnection.InvokeAsync("MarkNotificationAsRead", notificationId);

            Console.WriteLine($"Marked notification {notificationId} as read.");

            var notification = _notifications.FirstOrDefault(n => n.Id == notificationId);
            if (notification != null)
            {
                _notifications.Remove(notification);
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking notification as read: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
